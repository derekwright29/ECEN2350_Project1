//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

//TODO: make all wires 8-bits wide. Make the final mux_out handle this. and any other in-module places
//TODO: Figure out how to turn on magic or just have it going always...?

module Project1_top(
		    
		    //////////// CLOCK //////////
		    input 	 ADC_CLK_10,
		    input 	 MAX10_CLK1_50,
		    input 	 MAX10_CLK2_50,
		    
		    //////////// SEG7 //////////
		    output [7:0] HEX0,
		    output [7:0] HEX1,
		    output [7:0] HEX2,
		    output [7:0] HEX3,
		    output [7:0] HEX4,
		    output [7:0] HEX5,
		    
		    //////////// KEY //////////
		    
		    input [1:0]  KEY,
		    
		    //////////// LED //////////
		    output [9:0] LEDR,
		    
		    //////////// SW //////////
		    input [9:0]  SW
		    );
   
   
   
   //=======================================================
   //  REG/WIRE declarations
   //=======================================================
   //arithmetic outs
   wire [3:0] 			 add_out;
   wire [3:0] 			 sub_out;
   wire [3:0] 			 mult_out;
   wire [3:0] 			 div_out;
   //logic outs
   wire [3:0] 			 or_out;
   wire [3:0] 			 and_out;
   wire [3:0] 			 xor_out;
   wire [7:0] 			 not_out;
   //comparison outs
   wire [3:0] 			 greater_out;
   wire [3:0] 			 less_out;
   wire [3:0] 			 eq_out;
   wire [3:0] 			 max_out;
   //reg for magic LEDS
   reg [11:0] 			 magic_out;
	assign LEDR[9:0] = magic_out[10:1];
	
	//clock for magic
	wire 					magic_clk;
   
   //	//final out to 7-seg
   wire [3:0] 			 mux_out;
   
   wire [3:0] 			 arith_out;
   wire [3:0] 			 comp_out;
   wire [3:0] 			 log_out;
   wire [3:0] 			 magic;
   assign magic = 0;
   
   wire 			 carry_out;
   wire 			 overflow;
   
   reg [1:0] 			 buttons;
	wire [1:0] 			 switches;
	assign switches = SW[9:8];
	
	//user input. Saves typing SW[7:4] over and over.
	wire [3:0] x,y;
	wire [7:0] z;
	assign x = SW[7:4];
	assign y = SW[3:0];
	assign z = SW[7:0]; // same as {x,y}
   
				 //=======================================================
				 //  Structural coding
				 //=======================================================
				 
    //Turn off middle two seven-segs
   SevenSeg make_blank0(0,HEX2[6:0],1);
   assign HEX2[7] = 0;
   SevenSeg make_blank1(0,HEX3[6:0],1);
   assign HEX3[7] = 0;
   
   // Keep track of button sate control
   always @(posedge KEY[1])
     begin
	buttons[1] = buttons[1] ^ 1;
     end
   
   always @(posedge KEY[0])
     begin
	buttons[0] = buttons[0] ^ 1;
     end
   

//   
//   //Higher level mux: Log, Arith, Comp, Magic	
//   mux_4_1 gp_out(buttons, arith_out,comp_out,log_out,magic, mux_out);
//   
//   //Lower level mux for input selection
//   mux_4_1 logic_out(switches,and_out,or_out,xor_out,not_out,log_out);
//   
//   mux_4_1 comparison_out(switches,greater_out,less_out,eq_out,max_out,comp_out);
//   
//   mux_4_1 arithmetic_out(switches,add_out,sub_out,mult_out,div_out,arith_out);
   
   //input displayed left two dispays
   SevenSeg input1(x,HEX5[6:0],0);
   SevenSeg input2(y,HEX4[6:0],0);
   
//   OR_D(x,y,or_out);
//   AND_D(x,y,and_out);
//   XOR_D(x,y,xor_out);
//   NOT_D(z,not_out);
//   GREATER(x,y,greater_out);
//   LESS(x,y,less_out);
//   EQUAL(x,y,eq_out);
//   MAX(x,y,max_out);
//   //TODO
//	Sub();
//	Add(x,y,);
//	//end TODO
//   Div(z,div_out);
//   Mult(z, mult_out);
	
	clock_div(MAX10_CLK1_50, magic_clk);
	magic(magic_clk, magic_out);
   
   
   
	
	

endmodule
